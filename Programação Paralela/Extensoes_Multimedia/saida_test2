
Analyzing loop at test2.c:11

test2.c:11: note: ===== analyze_loop_nest =====
test2.c:11: note: === vect_analyze_loop_form ===
test2.c:11: note: === get_loop_niters ===
test2.c:11: note: ==> get_loop_niters:65536
test2.c:11: note: === vect_analyze_data_refs ===

test2.c:11: note: get vectype with 4 units of type double
test2.c:11: note: vectype: vector(4) double
test2.c:11: note: get vectype with 4 units of type double
test2.c:11: note: vectype: vector(4) double
test2.c:11: note: get vectype with 4 units of type double
test2.c:11: note: vectype: vector(4) double
test2.c:11: note: === vect_analyze_scalar_cycles ===
test2.c:11: note: Analyze phi: i_17 = PHI <i_14(4), 0(2)>

test2.c:11: note: Access function of PHI: {0, +, 1}_1
test2.c:11: note: step: 1,  init: 0
test2.c:11: note: Detected induction.
test2.c:11: note: Analyze phi: .MEM_18 = PHI <.MEM_13(4), .MEM_3(D)(2)>

test2.c:11: note: Analyze phi: ivtmp_30 = PHI <ivtmp_29(4), 65536(2)>

test2.c:11: note: Access function of PHI: {65536, +, 4294967295}_1
test2.c:11: note: step: 4294967295,  init: 65536
test2.c:11: note: Detected induction.
test2.c:11: note: === vect_pattern_recog ===
test2.c:11: note: vect_is_simple_use: operand i.0_5
test2.c:11: note: def_stmt: i.0_5 = (unsigned int) i_17;

test2.c:11: note: type of def: 3.
test2.c:11: note: === vect_mark_stmts_to_be_vectorized ===
test2.c:11: note: init: phi relevant? i_17 = PHI <i_14(4), 0(2)>

test2.c:11: note: init: phi relevant? .MEM_18 = PHI <.MEM_13(4), .MEM_3(D)(2)>

test2.c:11: note: init: phi relevant? ivtmp_30 = PHI <ivtmp_29(4), 65536(2)>

test2.c:11: note: init: stmt relevant? i.0_5 = (unsigned int) i_17;

test2.c:11: note: init: stmt relevant? _6 = i.0_5 * 8;

test2.c:11: note: init: stmt relevant? _7 = a_4(D) + _6;

test2.c:11: note: init: stmt relevant? _8 = *_7;

test2.c:11: note: init: stmt relevant? _10 = b_9(D) + _6;

test2.c:11: note: init: stmt relevant? _11 = *_10;

test2.c:11: note: init: stmt relevant? _12 = _8 + _11;

test2.c:11: note: init: stmt relevant? *_7 = _12;

test2.c:11: note: vec_stmt_relevant_p: stmt has vdefs.
test2.c:11: note: mark relevant 4, live 0.
test2.c:11: note: init: stmt relevant? i_14 = i_17 + 1;

test2.c:11: note: init: stmt relevant? ivtmp_29 = ivtmp_30 - 1;

test2.c:11: note: init: stmt relevant? if (ivtmp_29 != 0)

test2.c:11: note: worklist: examine stmt: *_7 = _12;

test2.c:11: note: vect_is_simple_use: operand _12
test2.c:11: note: def_stmt: _12 = _8 + _11;

test2.c:11: note: type of def: 3.
test2.c:11: note: mark relevant 4, live 0.
test2.c:11: note: worklist: examine stmt: _12 = _8 + _11;

test2.c:11: note: vect_is_simple_use: operand _8
test2.c:11: note: def_stmt: _8 = *_7;

test2.c:11: note: type of def: 3.
test2.c:11: note: mark relevant 4, live 0.
test2.c:11: note: vect_is_simple_use: operand _11
test2.c:11: note: def_stmt: _11 = *_10;

test2.c:11: note: type of def: 3.
test2.c:11: note: mark relevant 4, live 0.
test2.c:11: note: worklist: examine stmt: _11 = *_10;

test2.c:11: note: worklist: examine stmt: _8 = *_7;

test2.c:11: note: === vect_analyze_dependences ===
test2.c:11: note: dependence distance  = 0.
test2.c:11: note: dependence distance == 0 between *_7 and *_7
test2.c:11: note: === vect_determine_vectorization_factor ===
test2.c:11: note: ==> examining phi: i_17 = PHI <i_14(4), 0(2)>

test2.c:11: note: ==> examining phi: .MEM_18 = PHI <.MEM_13(4), .MEM_3(D)(2)>

test2.c:11: note: ==> examining phi: ivtmp_30 = PHI <ivtmp_29(4), 65536(2)>

test2.c:11: note: ==> examining statement: i.0_5 = (unsigned int) i_17;

test2.c:11: note: skip.
test2.c:11: note: ==> examining statement: _6 = i.0_5 * 8;

test2.c:11: note: skip.
test2.c:11: note: ==> examining statement: _7 = a_4(D) + _6;

test2.c:11: note: skip.
test2.c:11: note: ==> examining statement: _8 = *_7;

test2.c:11: note: get vectype for scalar type:  double
test2.c:11: note: get vectype with 4 units of type double
test2.c:11: note: vectype: vector(4) double
test2.c:11: note: vectype: vector(4) double
test2.c:11: note: nunits = 4
test2.c:11: note: ==> examining statement: _10 = b_9(D) + _6;

test2.c:11: note: skip.
test2.c:11: note: ==> examining statement: _11 = *_10;

test2.c:11: note: get vectype for scalar type:  double
test2.c:11: note: get vectype with 4 units of type double
test2.c:11: note: vectype: vector(4) double
test2.c:11: note: vectype: vector(4) double
test2.c:11: note: nunits = 4
test2.c:11: note: ==> examining statement: _12 = _8 + _11;

test2.c:11: note: get vectype for scalar type:  double
test2.c:11: note: get vectype with 4 units of type double
test2.c:11: note: vectype: vector(4) double
test2.c:11: note: get vectype for scalar type:  double
test2.c:11: note: get vectype with 4 units of type double
test2.c:11: note: vectype: vector(4) double
test2.c:11: note: vectype: vector(4) double
test2.c:11: note: nunits = 4
test2.c:11: note: ==> examining statement: *_7 = _12;

test2.c:11: note: get vectype for scalar type:  double
test2.c:11: note: get vectype with 4 units of type double
test2.c:11: note: vectype: vector(4) double
test2.c:11: note: vectype: vector(4) double
test2.c:11: note: nunits = 4
test2.c:11: note: ==> examining statement: i_14 = i_17 + 1;

test2.c:11: note: skip.
test2.c:11: note: ==> examining statement: ivtmp_29 = ivtmp_30 - 1;

test2.c:11: note: skip.
test2.c:11: note: ==> examining statement: if (ivtmp_29 != 0)

test2.c:11: note: skip.
test2.c:11: note: vectorization factor = 4
test2.c:11: note: === vect_analyze_data_refs_alignment ===
test2.c:11: note: dependence distance  = 0.
test2.c:11: note: accesses have the same alignment.dependence distance modulo vf == 0 between *_7 and *_7
test2.c:11: note: vect_compute_data_ref_alignment:
test2.c:11: note: can't force alignment of ref: *_7
test2.c:11: note: vect_compute_data_ref_alignment:
test2.c:11: note: can't force alignment of ref: *_10
test2.c:11: note: vect_compute_data_ref_alignment:
test2.c:11: note: can't force alignment of ref: *_7
test2.c:11: note: === vect_analyze_data_ref_accesses ===
test2.c:11: note: === vect_prune_runtime_alias_test_list ===
test2.c:11: note: === vect_enhance_data_refs_alignment ===
test2.c:11: note: Unknown misalignment, is_packed = 0
test2.c:11: note: vector alignment may not be reachable
test2.c:11: note: vect_can_advance_ivs_p:
test2.c:11: note: Analyze phi: i_17 = PHI <i_14(4), 0(2)>

test2.c:11: note: Access function of PHI: {0, +, 1}_1
test2.c:11: note: Analyze phi: .MEM_18 = PHI <.MEM_13(4), .MEM_3(D)(2)>

test2.c:11: note: virtual phi. skip.
test2.c:11: note: Analyze phi: ivtmp_30 = PHI <ivtmp_29(4), 65536(2)>

test2.c:11: note: Access function of PHI: {65536, +, 4294967295}_1
test2.c:11: note: Vectorizing an unaligned access.
test2.c:11: note: Vectorizing an unaligned access.
test2.c:11: note: Vectorizing an unaligned access.
test2.c:11: note: === vect_analyze_slp ===
test2.c:11: note: === vect_make_slp_decision ===
test2.c:11: note: === vect_detect_hybrid_slp ===
test2.c:11: note: === vect_analyze_loop_operations ===
test2.c:11: note: examining phi: i_17 = PHI <i_14(4), 0(2)>

test2.c:11: note: examining phi: .MEM_18 = PHI <.MEM_13(4), .MEM_3(D)(2)>

test2.c:11: note: examining phi: ivtmp_30 = PHI <ivtmp_29(4), 65536(2)>

test2.c:11: note: ==> examining statement: i.0_5 = (unsigned int) i_17;

test2.c:11: note: irrelevant.
test2.c:11: note: ==> examining statement: _6 = i.0_5 * 8;

test2.c:11: note: irrelevant.
test2.c:11: note: ==> examining statement: _7 = a_4(D) + _6;

test2.c:11: note: irrelevant.
test2.c:11: note: ==> examining statement: _8 = *_7;

test2.c:11: note: vect_is_simple_use: operand *_7
test2.c:11: note: not ssa-name.
test2.c:11: note: use not simple.
test2.c:11: note: vect_is_simple_use: operand *_7
test2.c:11: note: not ssa-name.
test2.c:11: note: use not simple.
test2.c:11: note: vect_model_load_cost: unaligned supported by hardware.
test2.c:11: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
test2.c:11: note: ==> examining statement: _10 = b_9(D) + _6;

test2.c:11: note: irrelevant.
test2.c:11: note: ==> examining statement: _11 = *_10;

test2.c:11: note: vect_is_simple_use: operand *_10
test2.c:11: note: not ssa-name.
test2.c:11: note: use not simple.
test2.c:11: note: vect_is_simple_use: operand *_10
test2.c:11: note: not ssa-name.
test2.c:11: note: use not simple.
test2.c:11: note: vect_model_load_cost: unaligned supported by hardware.
test2.c:11: note: vect_model_load_cost: inside_cost = 2, prologue_cost = 0 .
test2.c:11: note: ==> examining statement: _12 = _8 + _11;

test2.c:11: note: vect_is_simple_use: operand _8
test2.c:11: note: def_stmt: _8 = *_7;

test2.c:11: note: type of def: 3.
test2.c:11: note: vect_is_simple_use: operand _11
test2.c:11: note: def_stmt: _11 = *_10;

test2.c:11: note: type of def: 3.
test2.c:11: note: === vectorizable_operation ===
test2.c:11: note: vect_model_simple_cost: inside_cost = 1, prologue_cost = 0 .
test2.c:11: note: ==> examining statement: *_7 = _12;

test2.c:11: note: vect_is_simple_use: operand _12
test2.c:11: note: def_stmt: _12 = _8 + _11;

test2.c:11: note: type of def: 3.
test2.c:11: note: vect_model_store_cost: unaligned supported by hardware.
test2.c:11: note: vect_model_store_cost: inside_cost = 2, prologue_cost = 0 .
test2.c:11: note: ==> examining statement: i_14 = i_17 + 1;

test2.c:11: note: irrelevant.
test2.c:11: note: ==> examining statement: ivtmp_29 = ivtmp_30 - 1;

test2.c:11: note: irrelevant.
test2.c:11: note: ==> examining statement: if (ivtmp_29 != 0)

test2.c:11: note: irrelevant.
test2.c:11: note: vectorization_factor = 4, niters = 65536
test2.c:11: note: === vect_update_slp_costs_according_to_vf ===
test2.c:11: note: Cost model analysis: 
  Vector inside of loop cost: 7
  Vector prologue cost: 0
  Vector epilogue cost: 0
  Scalar iteration cost: 4
  Scalar outside cost: 0
  Vector outside cost: 0
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1

test2.c:11: note:   Runtime profitability threshold = 3

test2.c:11: note:   Static estimate profitability threshold = 3


Vectorizing loop at test2.c:11

test2.c:11: note: === vec_transform_loop ===
test2.c:11: note: ------>vectorizing phi: i_17 = PHI <i_14(4), 0(6)>

test2.c:11: note: ------>vectorizing phi: .MEM_18 = PHI <.MEM_13(4), .MEM_3(D)(6)>

test2.c:11: note: ------>vectorizing phi: ivtmp_30 = PHI <ivtmp_29(4), 65536(6)>

test2.c:11: note: ------>vectorizing statement: i.0_5 = (unsigned int) i_17;

test2.c:11: note: ------>vectorizing statement: _6 = i.0_5 * 8;

test2.c:11: note: ------>vectorizing statement: _7 = a_4(D) + _6;

test2.c:11: note: ------>vectorizing statement: _8 = *_7;

test2.c:11: note: transform statement.
test2.c:11: note: transform load. ncopies = 1
test2.c:11: note: create vector_type-pointer variable to type: vector(4) double  vectorizing a pointer ref: *a_4(D)
test2.c:11: note: created vect_pa.7_28
test2.c:11: note: add new stmt: vect_var_.8_22 = MEM[(double *)vect_pa.4_24];

test2.c:11: note: ------>vectorizing statement: _10 = b_9(D) + _6;

test2.c:11: note: ------>vectorizing statement: _11 = *_10;

test2.c:11: note: transform statement.
test2.c:11: note: transform load. ncopies = 1
test2.c:11: note: create vector_type-pointer variable to type: vector(4) double  vectorizing a pointer ref: *b_9(D)
test2.c:11: note: created vect_pb.12_21
test2.c:11: note: add new stmt: vect_var_.13_16 = MEM[(double *)vect_pb.9_20];

test2.c:11: note: ------>vectorizing statement: _12 = _8 + _11;

test2.c:11: note: transform statement.
test2.c:11: note: vect_is_simple_use: operand _8
test2.c:11: note: def_stmt: _8 = *_7;

test2.c:11: note: type of def: 3.
test2.c:11: note: vect_is_simple_use: operand _11
test2.c:11: note: def_stmt: _11 = *_10;

test2.c:11: note: type of def: 3.
test2.c:11: note: transform binary/unary operation.
test2.c:11: note: vect_get_vec_def_for_operand: _8
test2.c:11: note: vect_is_simple_use: operand _8
test2.c:11: note: def_stmt: _8 = *_7;

test2.c:11: note: type of def: 3.
test2.c:11: note: def =  _8  def_stmt =  _8 = *_7;

test2.c:11: note: vect_get_vec_def_for_operand: _11
test2.c:11: note: vect_is_simple_use: operand _11
test2.c:11: note: def_stmt: _11 = *_10;

test2.c:11: note: type of def: 3.
test2.c:11: note: def =  _11  def_stmt =  _11 = *_10;

test2.c:11: note: add new stmt: vect_var_.14_15 = vect_var_.8_22 + vect_var_.13_16;

test2.c:11: note: ------>vectorizing statement: *_7 = _12;

test2.c:11: note: transform statement.
test2.c:11: note: vect_is_simple_use: operand _12
test2.c:11: note: def_stmt: _12 = _8 + _11;

test2.c:11: note: type of def: 3.
test2.c:11: note: transform store. ncopies = 1
test2.c:11: note: vect_get_vec_def_for_operand: _12
test2.c:11: note: vect_is_simple_use: operand _12
test2.c:11: note: def_stmt: _12 = _8 + _11;

test2.c:11: note: type of def: 3.
test2.c:11: note: def =  _12  def_stmt =  _12 = _8 + _11;

test2.c:11: note: create vector_type-pointer variable to type: vector(4) double  vectorizing a pointer ref: *a_4(D)
test2.c:11: note: created vect_pa.18_2
test2.c:11: note: add new stmt: MEM[(double *)vect_pa.15_1] = vect_var_.14_15;

test2.c:11: note: ------>vectorizing statement: i_14 = i_17 + 1;

test2.c:11: note: ------>vectorizing statement: ivtmp_29 = ivtmp_30 - 1;

test2.c:11: note: ------>vectorizing statement: vect_pa.4_23 = vect_pa.4_24 + 32;

test2.c:11: note: ------>vectorizing statement: vect_pb.9_19 = vect_pb.9_20 + 32;

test2.c:11: note: ------>vectorizing statement: vect_pa.15_27 = vect_pa.15_1 + 32;

test2.c:11: note: ------>vectorizing statement: if (ivtmp_29 != 0)

loop at test2.c:13: if (ivtmp_25 < 16384)

test2.c:11: note: LOOP VECTORIZED.
test2.c:7: note: vectorized 1 loops in function.

test2.c:7: note: ===vect_slp_analyze_bb===

test2.c:7: note: === vect_analyze_data_refs ===

test2.c:7: note: not vectorized: not enough data-refs in basic block.

test2.c:13: note: ===vect_slp_analyze_bb===

test2.c:13: note: === vect_analyze_data_refs ===

test2.c:13: note: not vectorized: no vectype for stmt: vect_var_.8_22 = MEM[(double *)vect_pa.4_24];
 scalar_type: vector(4) double
test2.c:13: note: === vect_pattern_recog ===
test2.c:13: note: === vect_analyze_dependences ===
test2.c:13: note: === vect_analyze_data_refs_alignment ===
test2.c:13: note: === vect_analyze_data_ref_accesses ===
test2.c:13: note: === vect_analyze_slp ===
test2.c:13: note: Failed to SLP the basic block.
test2.c:13: note: not vectorized: failed to find SLP opportunities in basic block.

test2.c:7: note: ===vect_slp_analyze_bb===

test2.c:7: note: === vect_analyze_data_refs ===

test2.c:7: note: not vectorized: not enough data-refs in basic block.

test2.c:15: note: ===vect_slp_analyze_bb===

test2.c:15: note: === vect_analyze_data_refs ===

test2.c:15: note: not vectorized: not enough data-refs in basic block.
